defaults: &defaults
  working_directory: ~/workspace
  docker:
    - image: mojdigitalstudio/circleci-build-container
default_machine: &default_machine
  machine:
    enabled: true
  working_directory: ~/workspace
main_branch: &main_branch
  filters:
    branches:
      only: main
feature_branch: &feature_branch
  filters:
    branches:
      ignore: main

version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.3.0
  helm: circleci/helm@1.0.0

commands:
  deploy_to_environment:
    description: "Deploy build to environment"
    parameters:
      to:
        type: string
        default: latest
    steps:
      - attach_workspace:
          at: /tmp/build-info
      - add_ssh_keys:
          fingerprints:
            - "36:39:b2:8b:1a:6e:03:37:69:91:58:c4:fe:81:fe:d9"
      - run:
          name: Deploy to Development
          command: |
            export VERSION_TO_DEPLOY="$(cat /tmp/build-info/version-to-deploy.txt)" && \
            ssh -t ciuser@pfs-management-bastion-1.uksouth.cloudapp.azure.com ssh -t ciuser@<< parameters.to >>.pfs-management.com "sudo /etc/docker-decomposed-secrets.sh -v ${VERSION_TO_DEPLOY}"
  release_to_namespace:
    description: "Release with Helm"
    parameters:
      namespace:
        type: string
      establishment:
        type: string
      establishmentDisplayName:
        type: string
      releaseName:
        type: string
    steps:
      - kubernetes/install
      - helm/install-helm-client:
          version: v3.2.1
      - checkout:
          path: ~/git
      - attach_workspace:
          at: /tmp/build-info
      - run:
          name: Configure kubectl context
          command: |
            echo -n ${KUBE_CLUSTER_CERT} | base64 -d > /tmp/cluster-ca.crt
            kubectl config set-cluster ${KUBE_CLUSTER_NAME} \
              --certificate-authority=/tmp/cluster-ca.crt \
              --server="https://api.${KUBE_CLUSTER_NAME}"
            kubectl config set-credentials circleci \
              --token=${KUBE_TOKEN}
            kubectl config set-context ${KUBE_CLUSTER_NAME} \
              --cluster=${KUBE_CLUSTER_NAME} \
              --user=circleci \
              --namespace=${KUBE_NAMESPACE}
            kubectl config use-context ${KUBE_CLUSTER_NAME}
      - run:
          name: Release to << parameters.namespace >>
          command: |
            VERSION_TO_DEPLOY=$(cat /tmp/build-info/version-to-deploy.txt)
            helm upgrade << parameters.releaseName >> ~/git/helm_deploy/prisoner-content-hub-frontend \
              --install --wait --force --reset-values --timeout 360s \
              --namespace=${KUBE_NAMESPACE} \
              --values ~/git/helm_deploy/prisoner-content-hub-frontend/values.<< parameters.namespace >>.yaml \
              --set application.contentConfigMap="${HELM_BACKEND_RELEASE_NAME}" \
              --set application.config.establishmentName="<< parameters.establishment >>" \
              --set application.config.appName="<< parameters.establishmentDisplayName >>" \
              --set nomisApiToken="${SECRET_NOMIS_API_TOKEN}" \
              --set nomisApiEndpoint="${SECRET_NOMIS_API_ENDPOINT}" \
              --set image.tag=${VERSION_TO_DEPLOY}

jobs:
  test_branch:
    docker:
      - image: circleci/node:12-browsers
    working_directory: ~/workspace
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run Unit and Integration tests
          command: npm run lint && npm run test
  preview_build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Build frontend Docker image
          command: |
            BUILD_NUMBER="$CIRCLE_BUILD_NUM" \
            GIT_REF="$CIRCLE_SHA1" \
            GIT_DATE="$(git log --format=%cd -n1 --date=iso $CIRCLE_SHA1)" \
            make build
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Push frontend Docker image
          command: make push-preview
      - add_ssh_keys:
          fingerprints:
            - "0a:04:a1:27:17:3e:3d:8a:20:91:79:a1:9e:af:85:6c"
      - run:
          name: Save build number (for deployment)
          command: |
            mkdir -p /tmp/build-info
            echo preview > /tmp/build-info/version-to-deploy.txt
      - persist_to_workspace:
          root: /tmp/build-info
          paths:
            - version-to-deploy.txt
  preview_build_deploy_dev:
    <<: *default_machine
    steps:
      - deploy_to_environment:
          to: hub-dev
  preview_build_deploy_stage:
    <<: *default_machine
    steps:
      - deploy_to_environment:
          to: hub-stage
  build_frontend:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Build frontend Docker image
          command: |
            BUILD_NUMBER="$CIRCLE_BUILD_NUM" \
            GIT_REF="$CIRCLE_SHA1" \
            GIT_DATE="$(git log --format=%cd -n1 --date=iso $CIRCLE_SHA1)" \
            make build
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Push frontend Docker image
          command: make push
      - add_ssh_keys:
          fingerprints:
            - "0a:04:a1:27:17:3e:3d:8a:20:91:79:a1:9e:af:85:6c"
      - run:
          name: Create Git Tag
          command: |
            git config user.name "Circle CI"
            git config user.email "circle@circleci.com"
            git tag -a "$(date '+%d-%m-%Y')-$CIRCLE_BUILD_NUM" $CIRCLE_SHA1 -m "$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=%B)"
            git push origin "$(date '+%d-%m-%Y')-$CIRCLE_BUILD_NUM"
      - run:
          name: Save build number (for deployment)
          command: |
            mkdir -p /tmp/build-info
            echo build-${CIRCLE_BUILD_NUM} > /tmp/build-info/version-to-deploy.txt
      - persist_to_workspace:
          root: /tmp/build-info
          paths:
            - version-to-deploy.txt
  # run_e2e_test:
  #   docker:
  #     - image: circleci/node:12-browsers
  #   working_directory: /home/circleci/app
  #   steps:
  #     - checkout
  #     - run:
  #         name: Update NPM
  #         command: "sudo npm install -g npm@latest"
  #     - restore_cache:
  #         key: dependency-cache-{{ checksum "package-lock.json" }}
  #     - run:
  #         name: Install dependencies
  #         command: npm ci
  #     - save_cache:
  #         key: dependency-cache-{{ checksum "package-lock.json" }}
  #         paths:
  #           - ./node_modules
  #     - run:
  #         name: Run E2E tests against Staging
  #         command: |
  #           npm run build && \
  #           BUILD_NUMBER="$CIRCLE_BUILD_NUM" \
  #           GIT_REF="$CIRCLE_SHA1" \
  #           GIT_DATE="$(git log --format=%cd -n1 --date=iso $CIRCLE_SHA1)" \
  #           npm run record-build-info && \
  #           APP_NAME="HMP Local" \
  #           NODE_ENV=production \
  #           MATOMO_URL="foo.bar" \
  #           MATOMO_TOKEN="foobar" \
  #           MATOMO_API_URI="http://hub-matomo" \
  #           ENABLE_PRISON_SWITCH="true" \
  #           HUB_API_ENDPOINT="http://pfs-stage-hub-1.uksouth.cloudapp.azure.com:11001" \
  #           ELASTICSEARCH_ENDPOINT="UNSET" \
  #           ESTABLISHMENT_NAME="berwyn" \
  #           NOMIS_API_ENDPOINT="https://foo.bar" \
  #           FEEDBACK_URL="http://foo.bar" \
  #           npm run test:e2e:run
  #     - store_artifacts:
  #         path: ./cypress/videos
  #     - store_artifacts:
  #         path: ./cypress/screenshots
  deploy_dev:
    <<: *default_machine
    steps:
      - deploy_to_environment:
          to: hub-dev
  deploy_stage:
    <<: *default_machine
    steps:
      - deploy_to_environment:
          to: hub-stage
  deploy_prod:
    <<: *default_machine
    steps:
      - attach_workspace:
          at: /tmp/build-info
      - add_ssh_keys:
          fingerprints:
            - "36:39:b2:8b:1a:6e:03:37:69:91:58:c4:fe:81:fe:d9"
      - run:
          name: Deploy to Production
          command: |
            export VERSION_TO_DEPLOY="$(cat /tmp/build-info/version-to-deploy.txt)" && \
            ssh -t ciuser@pfs-management-bastion-1.uksouth.cloudapp.azure.com ssh -t ciuser@hub-wayland-prod.pfs-management.com "sudo /etc/docker-decomposed-secrets.sh -v ${VERSION_TO_DEPLOY}" && \
            ssh -t ciuser@pfs-management-bastion-1.uksouth.cloudapp.azure.com ssh -t ciuser@hub-berwyn-prod.pfs-management.com "sudo /etc/docker-decomposed-secrets.sh -v ${VERSION_TO_DEPLOY}"
            # ssh -t ciuser@pfs-management-bastion-1.uksouth.cloudapp.azure.com ssh -t ciuser@hub-cookhamwood-prod.pfs-management.com "sudo /etc/docker-decomposed-secrets.sh -v ${VERSION_TO_DEPLOY}"

  release_production:
    <<: *defaults
    steps:
      - release_to_namespace:
          namespace: "prod"
          establishment: "cookhamwood"
          establishmentDisplayName: "HMYOI Cookham Wood"
          releaseName: "prisoner-content-hub-frontend-cw"

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - test_branch:
          <<: *feature_branch
      - approve_preview_build:
          <<: *feature_branch
          type: approval
      - preview_build:
          <<: *feature_branch
          requires:
            - test_branch
            - approve_preview_build
      - preview_build_deploy_dev:
          <<: *feature_branch
          requires:
            - preview_build
      - approve_preview_build_deploy_stage:
          <<: *feature_branch
          type: approval
          requires:
            - preview_build_deploy_dev
      - preview_build_deploy_stage:
          <<: *feature_branch
          requires:
            - approve_preview_build_deploy_stage
      - build_frontend:
          <<: *main_branch
      # - run_e2e_test:
      #     <<: *main_branch
      #     requires:
      #       - build_frontend
      - approve_release_production:
          <<: *main_branch
          type: approval
          requires:
            - build_frontend
      - release_production:
          <<: *main_branch
          context: prisoner-content-hub-prod
          requires:
            - approve_release_production
      - deploy_dev:
          <<: *main_branch
          requires:
            - build_frontend
      - approve_deploy_stage:
          <<: *main_branch
          type: approval
          requires:
            - deploy_dev
      - deploy_stage:
          <<: *main_branch
          requires:
            - approve_deploy_stage
      - approve_deploy_prod:
          <<: *main_branch
          type: approval
          requires:
            - deploy_stage
      - deploy_prod:
          <<: *main_branch
          requires:
            - approve_deploy_prod
