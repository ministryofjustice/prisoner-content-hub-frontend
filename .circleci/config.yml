main_branch: &main_branch
  filters:
    branches:
      only: main
feature_branch: &feature_branch
  filters:
    branches:
      ignore: main

version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@7
  slack: circleci/slack@4.12.5

parameters:
  node-version:
    type: string
    default: 22.12-browsers

commands:
  release_to_namespace:
    description: "Release with Helm"
    parameters:
      environment:
        type: string
      releaseName:
        type: string
      releaseChannel:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/build-info
      - run:
          name: Release to << parameters.environment >>
          command: |
            VERSION_TO_DEPLOY=$(cat /tmp/build-info/version-to-deploy.txt)
            sed -i "s/appVersion:.*/appVersion: \"${VERSION_TO_DEPLOY}\"/g" "./helm_deploy/prisoner-content-hub-frontend/Chart.yaml"
            RELEASE_NAME=<< parameters.releaseName >>
            kubectl -n ${KUBE_NAMESPACE} get secret ip-allowlist -o json | jq '{ ingress: { allowed: .data |  map_values(@base64d) } } ' | \
            helm upgrade $RELEASE_NAME ./helm_deploy/prisoner-content-hub-frontend \
              --install --wait --reset-values --timeout 360s \
              --namespace=${KUBE_NAMESPACE} \
              --values ./helm_deploy/prisoner-content-hub-frontend/values-<< parameters.environment >>.yaml \
              --values - \
              --set application.contentConfigMapName="${HELM_BACKEND_RELEASE_NAME}" \
              --set application.nprConfigMapName="${HELM_NPR_CONFIG_MAP_NAME}" \
              --set application.sentry_dsn="${FRONTEND_SENTRY_DSN}" \
              --set application.sentry_environment="<< parameters.environment >>" \
              --set application.sentry_release="${VERSION_TO_DEPLOY}" \
              --set hmppsAuthClientId="${HMPPS_AUTH_CLIENT_ID}" \
              --set hmppsAuthClientSecret="${HMPPS_AUTH_CLIENT_SECRET}" \
              --set hmppsAuthBaseUrl="${HMPPS_AUTH_BASE_URL}" \
              --set prisonApiBaseUrl="${PRISON_API_BASE_URL}" \
              --set prisonerContactRegistryApiBaseUrl="${PRISONER_CONTACT_REGISTRY_BASE_URL}" \
              --set incentivesApiBaseUrl="${INCENTIVES_API_BASE_URL}" \
              --set adjudicationsApiBaseUrl="${ADJUDICATIONS_API_BASE_URL}" \
              --set cacheSecret="${CACHE_SECRET}" \
              --set prisonerAuthAD.clientId="${AZURE_AD_CLIENT_ID}" \
              --set prisonerAuthAD.clientSecret="${AZURE_AD_CLIENT_SECRET}" \
              --set appInsightsSecret="${APPINSIGHTS_INSTRUMENTATIONKEY}" \
              --set image.tag=${VERSION_TO_DEPLOY}

              PULL_REQUEST=${CIRCLE_PULL_REQUEST##*/}
              if [ ! -z $PULL_REQUEST ]; then
                  BRANCH=$(curl -s "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PULL_REQUEST}" | jq -r 'try .head.ref catch null')
                  CIRCLE_PR_BRANCH=$( echo "Deployed branch: *${BRANCH}*" | jq -Rs)
              fi
              GIT_MSG=$(git --no-pager log -1 --pretty=format:"%h : %s" | jq -Rs)

              echo "export NOTES=$(helm -n ${KUBE_NAMESPACE} get notes ${RELEASE_NAME} | head -n 10 | jq -Rs)" >> $BASH_ENV
              echo "export RELEASE_NAME=${RELEASE_NAME}" >> $BASH_ENV
              echo "export PR_NAME=${CIRCLE_PR_BRANCH}" >> $BASH_ENV
              echo "export GIT_MSG=${GIT_MSG}" >> $BASH_ENV
      - slack/notify:
          channel: << parameters.releaseChannel >>
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${CIRCLE_PROJECT_REPONAME}* version `${RELEASE_NAME}` deploy to *<< parameters.environment >>*"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "\n${PR_NAME}\nMost recent change: *${GIT_MSG}*\n\n${NOTES}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "\n:circleci-${CCI_STATUS}: Deploy ${CCI_STATUS}"
                    }
                  ]
                }
              ]
            }
          event: always

jobs:
  build:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache
      - run:
          command:
            npm run build
      - run:
          name: Linter check
          command: npm run lint
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - assets/stylesheets
            - .cache/Cypress

  run_unit_tests:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Run Unit and Integration tests
          command: npm run test
      - run:
          name: Lint code
          command: npm run lint

  run_e2e_tests:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: e2e tests
          command: npm run test:e2e:ci
      - store_test_results:
          path: e2e/test-results
      - store_artifacts:
          path: e2e/cypress/artifacts/videos
      - store_artifacts:
          path: e2e/cypress/artifacts/screenshots

  build_preview:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - hmpps/create_app_version
      - run:
          name: Build frontend Docker image
          command: |
            GIT_REF="$CIRCLE_SHA1" \
            GIT_DATE="$(git log --format=%cd -n1 --date=iso $CIRCLE_SHA1)" \
            make build
      - run:
          name: Push frontend Docker image
          command: make push-preview
      - add_ssh_keys:
          fingerprints:
            - "12:7d:f1:9e:93:67:11:0e:93:ea:9a:c0:d3:6e:dc:4c"
            - "a7:cf:5f:a6:3b:2b:79:de:d5:ed:0a:e0:ba:bb:0f:fb"
      - run:
          name: Save build number (for deployment)
          command: |
            mkdir -p /tmp/build-info
            echo $APP_VERSION > /tmp/build-info/version-to-deploy.txt
      - persist_to_workspace:
          root: /tmp/build-info
          paths:
            - version-to-deploy.txt

  build_production:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - hmpps/create_app_version
      - run:
          name: Build frontend Docker image
          command: |
            BUILD_NUMBER="$APP_VERSION" \
            GIT_REF="$CIRCLE_SHA1" \
            GIT_DATE="$(git log --format=%cd -n1 --date=iso $CIRCLE_SHA1)" \
            make build
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Push frontend Docker image
          command: make push
      - add_ssh_keys:
          fingerprints:
            - "12:7d:f1:9e:93:67:11:0e:93:ea:9a:c0:d3:6e:dc:4c"
            - "a7:cf:5f:a6:3b:2b:79:de:d5:ed:0a:e0:ba:bb:0f:fb"
      - run:
          name: Create Git Tag
          command: |
            git config user.name "Circle CI"
            git config user.email "circle@circleci.com"
            git tag -a "$APP_VERSION" $CIRCLE_SHA1 -m "$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=%B)"
            git push origin "$APP_VERSION"
      - run:
          name: Save build number (for deployment)
          command: |
            mkdir -p /tmp/build-info
            echo ${APP_VERSION} > /tmp/build-info/version-to-deploy.txt
      - persist_to_workspace:
          root: /tmp/build-info
          paths:
            - version-to-deploy.txt

  deploy_cloud_platform:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    parameters:
      environment:
        type: string
      releaseChannel:
        type: string
    steps:
      - checkout
      - hmpps/k8s_setup
      - hmpps/install_helm
      - release_to_namespace:
          environment: "<< parameters.environment >>"
          releaseName: "prisoner-content-hub-frontend"
          releaseChannel: "<< parameters.releaseChannel >>"

  clean_up_dev_deployments:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - hmpps/k8s_setup
      - hmpps/install_helm
      - run:
          name: Clean up dev deployments
          command: |
            curl -s "https://api.github.com/repos/ministryofjustice/prisoner-content-hub-frontend/pulls" | jq  '.[].number' | sort > prs.txt
            helm --namespace prisoner-content-hub-development list | awk '{ print $1 }' | grep 'frontend-' | sed "s/[^0-9]//g" | sort > deployments.txt

            deployments_to_delete=($(comm -23 deployments.txt prs.txt))

            echo "Deployments to delete: ${#deployments_to_delete[@]}"
            for i in "${deployments_to_delete[@]}"
              do
                DEPLOYMENT="prisoner-content-hub-frontend-${i}"
                echo "Uninstalling deployment: ${DEPLOYMENT}"
                helm -n prisoner-content-hub-development uninstall "${DEPLOYMENT}"
            done

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - run_unit_tests:
          requires:
            - build
      - run_e2e_tests:
          requires:
            - build
      - build_preview:
          <<: *feature_branch

      - deploy_cloud_platform:
          <<: *feature_branch
          context:
            - hmpps-common-vars
            - prisoner-content-hub-development
          name: deploy_to_dev
          environment: "development"
          releaseChannel: "launchpad-alerts-nonprod"
          requires:
            - build_preview

      - approve_deploy_staging:
          <<: *feature_branch
          type: approval
          requires:
            - deploy_to_dev

      - deploy_cloud_platform:
          <<: *feature_branch
          context:
            - hmpps-common-vars
            - prisoner-content-hub-staging
          name: deploy_to_staging_branch
          environment: "staging"
          releaseChannel: "launchpad-alerts-nonprod"
          requires:
            - approve_deploy_staging

      - clean_up_dev_deployments:
          <<: *main_branch
          context:
            - prisoner-content-hub-development

      - build_production:
          <<: *main_branch
          requires:
            - run_unit_tests
            - run_e2e_tests

      - deploy_cloud_platform:
          <<: *main_branch
          context:
            - hmpps-common-vars
            - prisoner-content-hub-staging
          name: deploy_to_staging
          environment: "staging"
          releaseChannel: "launchpad-alerts-nonprod"
          requires:
            - build_production

      - approve_deploy_production:
          <<: *main_branch
          type: approval
          requires:
            - deploy_to_staging

      - deploy_cloud_platform:
          <<: *main_branch
          context:
            - hmpps-common-vars
            - prisoner-content-hub-prod
          environment: "production"
          releaseChannel: "launchpad-alerts"
          requires:
            - approve_deploy_production

  security:
    triggers:
      - schedule:
          cron: "32 4 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/npm_security_audit:
          slack_channel: "launchpad-alerts"
          context:
            - hmpps-common-vars
      - hmpps/veracode_pipeline_scan:
          slack_channel: launchpad-alerts
          context:
            - hmpps-common-vars
            - veracode-credentials
  security-weekly:
    triggers:
      - schedule:
          cron: "48 5 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          slack_channel: launchpad-alerts
          context:
            - veracode-credentials
            - hmpps-common-vars
