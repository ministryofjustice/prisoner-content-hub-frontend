defaults: &defaults
  working_directory: ~/workspace
  docker:
    - image: mojdigitalstudio/circleci-build-container
default_machine: &default_machine
  machine:
    enabled: true
  working_directory: ~/workspace
test_setup: &test_setup
  docker:
    - image: circleci/node:12-browsers
  working_directory: ~/workspace
main_branch: &main_branch
  filters:
    branches:
      only: main
feature_branch: &feature_branch
  filters:
    branches:
      ignore: main

version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.3.0
  helm: circleci/helm@1.0.0

commands:
  release_to_namespace:
    description: "Release with Helm"
    parameters:
      environment:
        type: string
      establishment:
        type: string
      releaseName:
        type: string
    steps:
      - kubernetes/install
      - helm/install-helm-client:
          version: v3.2.1
      - checkout:
          path: ~/git
      - attach_workspace:
          at: /tmp/build-info
      - run:
          name: Configure kubectl context
          command: |
            echo -n ${KUBE_CLUSTER_CERT} | base64 -d > /tmp/cluster-ca.crt
            kubectl config set-cluster ${KUBE_CLUSTER_NAME} \
              --certificate-authority=/tmp/cluster-ca.crt \
              --server="https://api.${KUBE_CLUSTER_NAME}"
            kubectl config set-credentials circleci \
              --token=${KUBE_TOKEN}
            kubectl config set-context ${KUBE_CLUSTER_NAME} \
              --cluster=${KUBE_CLUSTER_NAME} \
              --user=circleci \
              --namespace=${KUBE_NAMESPACE}
            kubectl config use-context ${KUBE_CLUSTER_NAME}
      - run:
          name: Release to << parameters.environment >> (<< parameters.establishment >>)
          command: |
            VERSION_TO_DEPLOY=$(cat /tmp/build-info/version-to-deploy.txt)
            helm upgrade << parameters.releaseName >> ~/git/helm_deploy/prisoner-content-hub-frontend \
              --install --wait --force --reset-values --timeout 360s \
              --namespace=${KUBE_NAMESPACE} \
              --values ~/git/helm_deploy/prisoner-content-hub-frontend/values.establishment-<< parameters.establishment >>.yaml \
              --values ~/git/helm_deploy/prisoner-content-hub-frontend/values.<< parameters.environment >>.yaml \
              --set application.contentConfigMapName="${HELM_BACKEND_RELEASE_NAME}" \
              --set application.nprConfigMapName="${HELM_NPR_CONFIG_MAP_NAME}" \
              --set application.sentry_dsn="${FRONTEND_SENTRY_DSN}" \
              --set nomisApiToken="${SECRET_NOMIS_API_TOKEN}" \
              --set nomisApiEndpoint="${SECRET_NOMIS_API_ENDPOINT}" \
              --set image.tag=${VERSION_TO_DEPLOY}

jobs:
  run_unit_and_integration_tests:
    <<: *test_setup
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run Unit and Integration tests
          command: npm run lint && npm run test

  build_preview:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Build frontend Docker image
          command: |
            BUILD_NUMBER="$CIRCLE_BUILD_NUM" \
            GIT_REF="$CIRCLE_SHA1" \
            GIT_DATE="$(git log --format=%cd -n1 --date=iso $CIRCLE_SHA1)" \
            make build
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Push frontend Docker image
          command: make push-preview
      - add_ssh_keys:
          fingerprints:
            - "0a:04:a1:27:17:3e:3d:8a:20:91:79:a1:9e:af:85:6c"
      - run:
          name: Save build number (for deployment)
          command: |
            mkdir -p /tmp/build-info
            echo preview > /tmp/build-info/version-to-deploy.txt
      - persist_to_workspace:
          root: /tmp/build-info
          paths:
            - version-to-deploy.txt

  build_production:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Build frontend Docker image
          command: |
            BUILD_NUMBER="$CIRCLE_BUILD_NUM" \
            GIT_REF="$CIRCLE_SHA1" \
            GIT_DATE="$(git log --format=%cd -n1 --date=iso $CIRCLE_SHA1)" \
            make build
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Push frontend Docker image
          command: make push
      - add_ssh_keys:
          fingerprints:
            - "0a:04:a1:27:17:3e:3d:8a:20:91:79:a1:9e:af:85:6c"
      - run:
          name: Create Git Tag
          command: |
            git config user.name "Circle CI"
            git config user.email "circle@circleci.com"
            git tag -a "$(date '+%d-%m-%Y')-$CIRCLE_BUILD_NUM" $CIRCLE_SHA1 -m "$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=%B)"
            git push origin "$(date '+%d-%m-%Y')-$CIRCLE_BUILD_NUM"
      - run:
          name: Save build number (for deployment)
          command: |
            mkdir -p /tmp/build-info
            echo build-${CIRCLE_BUILD_NUM} > /tmp/build-info/version-to-deploy.txt
      - persist_to_workspace:
          root: /tmp/build-info
          paths:
            - version-to-deploy.txt

  deploy_cloud_platform_production:
    <<: *defaults
    steps:
      - release_to_namespace:
          environment: "production"
          establishment: "berwyn"
          releaseName: "prisoner-content-hub-berwyn"
      - release_to_namespace:
          environment: "production"
          establishment: "cookhamwood"
          releaseName: "prisoner-content-hub-cookhamwood"
      - release_to_namespace:
          environment: "production"
          establishment: "wayland"
          releaseName: "prisoner-content-hub-wayland"

  deploy_cloud_platform_staging:
    <<: *defaults
    steps:
      - release_to_namespace:
          environment: "staging"
          establishment: "berwyn"
          releaseName: "prisoner-content-hub-berwyn"
      - release_to_namespace:
          environment: "staging"
          establishment: "cookhamwood"
          releaseName: "prisoner-content-hub-cookhamwood"
      - release_to_namespace:
          environment: "staging"
          establishment: "wayland"
          releaseName: "prisoner-content-hub-wayland"

  deploy_cloud_platform_development_preview:
    <<: *defaults
    steps:
      - release_to_namespace:
          environment: "development"
          establishment: "berwyn"
          releaseName: "prisoner-content-hub-berwyn"
      - release_to_namespace:
          environment: "development"
          establishment: "cookhamwood"
          releaseName: "prisoner-content-hub-cookhamwood"
      - release_to_namespace:
          environment: "development"
          establishment: "wayland"
          releaseName: "prisoner-content-hub-wayland"

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - run_unit_and_integration_tests

      - approve_preview_build:
          <<: *feature_branch
          type: approval

      - build_preview:
          <<: *feature_branch
          requires:
            - approve_preview_build

      - deploy_cloud_platform_development_preview:
          <<: *feature_branch
          context: prisoner-content-hub-development
          requires:
            - build_preview

      - build_production:
          <<: *main_branch
          requires:
            - run_unit_and_integration_tests

      - deploy_cloud_platform_staging:
          <<: *main_branch
          context: prisoner-content-hub-staging
          requires:
            - build_production

      - approve_deploy_production:
          <<: *main_branch
          type: approval
          requires:
            - deploy_cloud_platform_staging

      - deploy_cloud_platform_production:
          <<: *main_branch
          context: prisoner-content-hub-prod
          requires:
            - approve_deploy_production
